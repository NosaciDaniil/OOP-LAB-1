#include <iostream>
#include <vector>
#include <memory>
#include <cstdlib>
#include <ctime>
#include <iomanip>
using namespace std;

const int DIMENSIUNE_HARTA = 10;

// Abstract Base Class: EntitateEcosistem
class EntitateEcosistem {
protected:
    string nume;
    double energie;
    pair<int, int> pozitie;
    double rataSupravietuire;

public:
    EntitateEcosistem(const string& nume, double energie, pair<int, int> pozitie, double rataSupravietuire)
        : nume(nume), energie(energie), pozitie(pozitie), rataSupravietuire(rataSupravietuire) {}

    virtual void actioneaza() = 0;
    virtual char simbol() const = 0;
    virtual ~EntitateEcosistem() = default;

    string getNume() const { return nume; }
    double getEnergie() const { return energie; }
    pair<int, int> getPozitie() const { return pozitie; }

    void muta(pair<int, int> nouaPozitie) { pozitie = nouaPozitie; }
    bool esteViu() const { return energie > 0; }
};

// Class Planta
class Planta : public EntitateEcosistem {
public:
    Planta(const string& nume, double energie, pair<int, int> pozitie)
        : EntitateEcosistem(nume, energie, pozitie, 1.0) {}

    void actioneaza() override {
        energie += 5; // Planta creste in energie
    }

    char simbol() const override {
        return 'P';
    }

    shared_ptr<Planta> reproduce() {
        return make_shared<Planta>(nume + " copil", energie / 2, pozitie);
    }
};

// Abstract Class Animal
class Animal : public EntitateEcosistem {
protected:
    double viteza;
    string tipHrana;

public:
    Animal(const string& nume, double energie, pair<int, int> pozitie, double rataSupravietuire, double viteza, const string& tipHrana)
        : EntitateEcosistem(nume, energie, pozitie, rataSupravietuire), viteza(viteza), tipHrana(tipHrana) {}

    virtual void mananca(shared_ptr<EntitateEcosistem> prada) = 0;
    void deplaseaza(pair<int, int> destinatie) {
        pozitie = destinatie;
        energie -= viteza;
    }
};

// Subclass Erbivor
class Erbivor : public Animal {
public:
    Erbivor(const string& nume, double energie, pair<int, int> pozitie, double viteza)
        : Animal(nume, energie, pozitie, 0.8, viteza, "plante") {}

    void mananca(shared_ptr<EntitateEcosistem> prada) override {
        if (auto planta = dynamic_pointer_cast<Planta>(prada)) {
            energie += planta->getEnergie();
            planta->muta({-1, -1}); // Planta este "mancata"
        }
    }

    void actioneaza() override {
        energie -= 2; // Consum de energie zilnic
    }

    char simbol() const override {
        return 'E';
    }
};

// Subclass Carnivor
class Carnivor : public Animal {
public:
    Carnivor(const string& nume, double energie, pair<int, int> pozitie, double viteza)
        : Animal(nume, energie, pozitie, 0.7, viteza, "animale") {}

    void mananca(shared_ptr<EntitateEcosistem> prada) override {
        if (auto animal = dynamic_pointer_cast<Animal>(prada)) {
            energie += animal->getEnergie();
            animal->muta({-1, -1}); // Animalul este "mancat"
        }
    }

    void actioneaza() override {
        energie -= 3; // Consum de energie zilnic
    }

    char simbol() const override {
        return 'C';
    }
};

// Subclass Omnivor
class Omnivor : public Animal {
public:
    Omnivor(const string& nume, double energie, pair<int, int> pozitie, double viteza)
        : Animal(nume, energie, pozitie, 0.9, viteza, "plante si animale") {}

    void mananca(shared_ptr<EntitateEcosistem> prada) override {
        if (auto planta = dynamic_pointer_cast<Planta>(prada)) {
            energie += planta->getEnergie();
            planta->muta({-1, -1});
        } else if (auto animal = dynamic_pointer_cast<Animal>(prada)) {
            energie += animal->getEnergie();
            animal->muta({-1, -1});
        }
    }

    void actioneaza() override {
        energie -= 4; // Consum de energie zilnic
    }

    char simbol() const override {
        return 'O';
    }
};

// Class Ecosistem
class Ecosistem {
private:
    vector<shared_ptr<EntitateEcosistem>> entitati;
    char harta[DIMENSIUNE_HARTA][DIMENSIUNE_HARTA];

    void initializeazaHarta() {
        for (int i = 0; i < DIMENSIUNE_HARTA; ++i) {
            for (int j = 0; j < DIMENSIUNE_HARTA; ++j) {
                harta[i][j] = '.';
            }
        }

        for (const auto& entitate : entitati) {
            auto poz = entitate->getPozitie();
            if (poz.first >= 0 && poz.first < DIMENSIUNE_HARTA && poz.second >= 0 && poz.second < DIMENSIUNE_HARTA) {
                harta[poz.first][poz.second] = entitate->simbol();
            }
        }
    }

public:
    Ecosistem() {}

    void adaugaEntitate(shared_ptr<EntitateEcosistem> entitate) {
        entitati.push_back(entitate);
    }

    void eliminaEntitate(const string& nume) {
        entitati.erase(remove_if(entitati.begin(), entitati.end(), [&nume](const shared_ptr<EntitateEcosistem>& entitate) {
            return entitate->getNume() == nume;
        }), entitati.end());
    }

    void simuleazaPas() {
        for (auto& entitate : entitati) {
            if (entitate->esteViu()) {
                entitate->actioneaza();
                auto poz = entitate->getPozitie();
                if (poz.first >= 0 && poz.first < DIMENSIUNE_HARTA && poz.second >= 0 && poz.second < DIMENSIUNE_HARTA) {
                    harta[poz.first][poz.second] = entitate->simbol();
                }
            }
        }
        entitati.erase(remove_if(entitati.begin(), entitati.end(),
            [](const shared_ptr<EntitateEcosistem>& e) { return !e->esteViu(); }), entitati.end());
        initializeazaHarta();
    }

    void afiseazaHarta() const {
        for (int i = 0; i < DIMENSIUNE_HARTA; ++i) {
            for (int j = 0; j < DIMENSIUNE_HARTA; ++j) {
                cout << harta[i][j] << " ";
            }
            cout << endl;
        }
    }

    void afiseazaStare() const {
        for (const auto& entitate : entitati) {
            if (entitate->esteViu()) {
                cout << entitate->getNume() << " la pozitia " << entitate->getPozitie().first << ", " << entitate->getPozitie().second << " cu energie " << entitate->getEnergie() << endl;
            }
        }
    }
};

pair<int, int> pozitieAleatorie(const char harta[DIMENSIUNE_HARTA][DIMENSIUNE_HARTA]) {
    pair<int, int> poz;
    do {
        poz = {rand() % DIMENSIUNE_HARTA, rand() % DIMENSIUNE_HARTA};
    } while (harta[poz.first][poz
    ecosistem.adaugaEntitate(omnivor);

    while (true) {
        cout << "\n--- Ecosistem ---\n";
        ecosistem.afiseazaHarta();
        ecosistem.afiseazaStare();

        cout << "\nOptiuni:\n";
        cout << "1. Simuleaza un pas\n";
        cout << "2. Adauga entitate\n";
        cout << "3. Elimina entitate\n";
        cout << "4. Iesire\n";
        cout << "Alege optiunea: ";
        int optiune;
        cin >> optiune;

        if (optiune == 1) {
            ecosistem.simuleazaPas();
        } else if (optiune == 2) {
            cout << "Tip entitate (1 - Planta, 2 - Erbivor, 3 - Carnivor, 4 - Omnivor): ";
            int tip;
            cin >> tip;
            cout << "Nume entitate: ";
            string nume;
            cin >> nume;
            cout << "Energie initiala: ";
            double energie;
            cin >> energie;
            pair<int, int> pozitie = make_pair(rand() % DIMENSIUNE_HARTA, rand() % DIMENSIUNE_HARTA);

            if (tip == 1) {
                ecosistem.adaugaEntitate(make_shared<Planta>(nume, energie, pozitie));
            } else if (tip == 2) {
                cout << "Viteza: ";
                double viteza;
                cin >> viteza;
                ecosistem.adaugaEntitate(make_shared<Erbivor>(nume, energie, pozitie, viteza));
            } else if (tip == 3) {
                cout << "Viteza: ";
                double viteza;
                cin >> viteza;
                ecosistem.adaugaEntitate(make_shared<Carnivor>(nume, energie, pozitie, viteza));
            } else if (tip == 4) {
                cout << "Viteza: ";
                double viteza;
                cin >> viteza;
                ecosistem.adaugaEntitate(make_shared<Omnivor>(nume, energie, pozitie, viteza));
            } else {
                cout << "Tip invalid.\n";
            }
        } else if (optiune == 3) {
            cout << "Nume entitate de eliminat: ";
            string nume;
            cin >> nume;
            ecosistem.eliminaEntitate(nume);
        } else if (optiune == 4) {
            cout << "Iesire din simulare.\n";
            break;
        } else {
            cout << "Optiune invalida.\n";
        }
    }
}

int main() {
    srand(static_cast<unsigned int>(time(0)));
    meniu();
    return 0;
}
